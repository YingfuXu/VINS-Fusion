%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 1  

imu_topic: "/snappy_imu"
image0_topic: "/snappy_cam/stereo_l"
# image1_topic: "/cam1/image_raw"
output_path: "/home/yingfu/VIO/VINS-Fusion_ws/output"

cam0_calib: "cam0_pinhole.yaml"
# cam1_calib: "cam1_mei.yaml"
image_width: 640
image_height: 480

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

body_T_cam0: !!opencv-matrix # R rotate a vector from cam0 to IMU, t point from IMU to Cam0, expressed in IMU frame
   rows: 4
   cols: 4
   dt: d
   data: [-0.02725669, -0.71392061,  0.69969596,  0.00751451,
            -0.99962606,  0.01793147, -0.02064447,  0.02404535,
            0.00219194, -0.69999702, -0.7141424,   0.00577265,
            0.0, 0.0, 0.0, 1.0]

#Multiple thread support
multiple_thread: 1

#feature traker paprameters
max_cnt: 300            # max feature number in feature tracking
min_dist: 30             # min distance between two features 
freq: 0                 # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.0333  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
# acc_n: 2.236067977          # accelerometer measurement noise standard deviation. 
# gyr_n: 1.118033989         # gyroscope measurement noise standard deviation.     
acc_n: 0.01118034          # accelerometer measurement noise standard deviation. 
gyr_n: 0.00559017         # gyroscope measurement noise standard deviation.     
# acc_n: 0.1          # accelerometer measurement noise standard deviation. 
# gyr_n: 0.01         # gyroscope measurement noise standard deviation.   
acc_w: 0.04472136        # accelerometer bias random work noise standard deviation.  
gyr_w: 8.94427e-04      # gyroscope bias random work noise standard deviation. 

# NOISE DENSITY densities: 
# https://www.vectornav.com/resources/inertial-navigation-primer/specifications--and--error-budgets/specs-imuspecs
# By multiplying the noise density (ND) by the square root of the sampling rate (SR), the noise standard deviation (σ) at that rate can be recovered (σ=ND√SR).
# acc_n: 0.1     
# gyr_n: 0.05    
# acc_w: 0.002   
# gyr_w: 4.0e-05 

# acc_n: 0.1          # accelerometer measurement noise standard deviation. 
# gyr_n: 0.01         # gyroscope measurement noise standard deviation.     
# acc_w: 0.001        # accelerometer bias random work noise standard deviation.  
# gyr_w: 0.0001       # gyroscope bias random work noise standard deviation.     

g_norm: 9.81007     # gravity magnitude

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: -0.01484888826656275            # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "~/output/pose_graph/" # save and load path
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
